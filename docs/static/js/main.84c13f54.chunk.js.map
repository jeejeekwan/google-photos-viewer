{"version":3,"sources":["PhotoServiceContext.js","HeaderBreadcrumb.js","AlbumsList.js","ViewPhoto.js","Modal.js","ImageModal.js","ViewAlbum.js","About.js","GooglePhotosService.js","App.js","serviceWorker.js","index.js"],"names":["context","createContext","undefined","HeaderBreadcrumb","props","react_default","a","createElement","className","albumDetails","title","react_router_dom","to","AlbumsList","service","useContext","PhotoServiceContext","_useState","useState","_useState2","Object","slicedToArray","albums","setAlbums","_useState3","_useState4","isLoading","setIsLoading","useEffect","loadAlbums","then","arg","newAlbums","map","obj","key","id","src","coverPhotoBaseUrl","alt","length","src_HeaderBreadcrumb","ViewPhoto","photoID","photoNumber","photosTotal","console","log","photoDetails","setPhotoDetails","loadPhotoDetail","match","baseUrl","modalRoot","document","getElementById","Modal","el","setAttribute","appendChild","removeChild","ReactDOM","createPortal","children","ImageModal","src_Modal","onClick","e","handleClose","ViewAlbum","albumID","params","aid","setAlbumDetails","_useState5","_useState6","shown","setShown","_useState7","_useState8","selectedPhotoID","setSelectedPhotoID","_useState9","_useState10","selectedPhotoNumber","setSelectedPhotoNumber","_useState11","_useState12","currentPageNumber","setCurrentPageNumber","_useState13","_useState14","currentPageToken","setCurrentPageToken","_useState15","_useState16","previousPageTokenArray","setPreviousPageTokenArray","handleClickShowOrHide","pid","arguments","pnumber","preventDefault","targetClassName","target","parseInt","loadAlbumDetail","result","mediaItems","mediaItem","itemIndex","href","src_ImageModal","src_ViewPhoto","mediaItemsCount","handleClickPrevious","Math","ceil","nextPageToken","concat","toConsumableArray","handleClickNext","About","GooglePhotosService","gapiClient","classCallCheck","this","photoslibrary","list","fullResponse","token","_this","get","albumId","response","album","search","pageToken","objectSpread","catch","mediaItemId","SCOPE","App","initialising","setInitialising","isAuthorised","setIsAuthorised","photoService","setPhotoService","intervalId","setInterval","window","gapi","clearInterval","load","client","init","discoveryDocs","clientId","gapiID","scope","auth","auth2","getAuthInstance","isSignedIn","listen","user","hasGrantedScopes","currentUser","startAuth","onSignOut","useCallback","signOut","onSignIn","signIn","Provider","value","react_router","path","exact","component","Boolean","location","hostname","render","src_App","process","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oNAIeA,EAFCC,6BAAcC,GCoBfC,MAnBf,SAA2BC,GACzB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,UACIH,EAAMK,cAAgBL,EAAMK,aAAaC,MACzCL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,KAAT,UACE,SAEFR,EAAMK,cAAgBL,EAAMK,aAAaC,OACzCL,EAAAC,EAAAC,cAAA,2BAEKH,EAAMK,aAAaC,UC8CrBG,MAvDf,WACE,IAAMC,EAAUC,qBAAWC,GADNC,EAEOC,mBAAS,IAFhBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEdK,EAFcH,EAAA,GAENI,EAFMJ,EAAA,GAAAK,EAGaN,oBAAS,GAHtBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGdE,EAHcD,EAAA,GAGHE,EAHGF,EAAA,GAMrBG,oBAAU,WACQd,EAAQe,aAChBC,KAAK,SAAUC,GACrBR,EAAUQ,GACVJ,GAAa,MAGjB,CAACb,IAGD,IAAMkB,EAAYV,EAAOW,IAAK,SAAUC,GACtC,OACE7B,EAAAC,EAAAC,cAAA,MAAI4B,IAAKD,EAAIE,IACX/B,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAI,UAAYsB,EAAIE,IACxB/B,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAK8B,IAAKH,EAAII,kBAAmBC,IAAI,KACrClC,EAAAC,EAAAC,cAAA,kBACEF,EAAAC,EAAAC,cAAA,UACI2B,EAAIxB,UAKdL,EAAAC,EAAAC,cAAA,cAKN,OACEF,EAAAC,EAAAC,cAAA,WACImB,GAAa,aACbJ,EAAOkB,OAAS,GAChBnC,EAAAC,EAAAC,cAAA,WAGEF,EAAAC,EAAAC,cAACkC,EAAD,MAEApC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UACVwB,IAKR3B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,KAAT,iCCHS8B,MAjDf,SAAoBtC,GAClB,IAAMuC,EAAUvC,EAAMuC,QAChBC,EAAcxC,EAAMwC,YACpBC,EAAczC,EAAMyC,YAC1BC,QAAQC,IAAI,cAAeJ,EAASC,EAAaC,GAEjD,IAAM/B,EAAUC,qBAAWC,GANFC,EAOeC,wBAAShB,GAPxBiB,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAOlB+B,EAPkB7B,EAAA,GAOJ8B,EAPI9B,EAAA,GAAAK,EAQSN,oBAAS,GARlBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAQlBE,EARkBD,EAAA,GAQPE,EAROF,EAAA,GAqBzB,OAXAG,oBACE,WACkBd,EAAQoC,gBAAgBP,GAChCb,KAAK,SAAUC,GACrBkB,EAAgBlB,GAChBJ,GAAa,MAGjB,CAACvB,EAAM+C,MAAOrC,EAAS6B,IAIvBtC,EAAAC,EAAAC,cAAA,WACImB,GACArB,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,oCAKDmB,GAAasB,GACd3C,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAK8B,IAAKW,EAAaI,QAASb,IAAI,KACpClC,EAAAC,EAAAC,cAAA,kBACIqC,EADJ,OACuBC,KAIxBnB,IAAcsB,GACf3C,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,wCCpCJ8C,EAAYC,SAASC,eAAe,QAqB3BC,MAnBf,SAAgBpD,GAEd,IAAMqD,EAAKH,SAAS/C,cAAc,OAclC,OAbAkD,EAAGC,aAAa,KAAM,SAGtB9B,oBAAW,WAKT,OAJAyB,EAAUM,YAAaF,GAIhB,WACLJ,EAAUO,YAAaH,MAIpBI,IAASC,aAAc1D,EAAM2D,SAAUN,ICTjCO,MAZf,SAAqB5D,GACnB,OACEC,EAAAC,EAAAC,cAAC0D,EAAD,KACE5D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAU0D,QAAU,SAACC,GAAQ/D,EAAMgE,YAAYD,KAC5D9D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXJ,EAAM2D,aCgJHM,MAjJf,SAAoBjE,GAElB,IAAMkE,EAAUlE,EAAM+C,MAAMoB,OAAOC,IAG7B1D,EAAUC,qBAAWC,GALFC,EAOeC,wBAAShB,GAPxBiB,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAOlBR,EAPkBU,EAAA,GAOJsD,EAPItD,EAAA,GAAAK,EAQSN,oBAAS,GARlBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAQlBE,EARkBD,EAAA,GAQPE,EAROF,EAAA,GAAAiD,EASCxD,oBAAS,GATVyD,EAAAvD,OAAAC,EAAA,EAAAD,CAAAsD,EAAA,GASlBE,EATkBD,EAAA,GASXE,EATWF,EAAA,GAAAG,EAUqB5D,wBAAShB,GAV9B6E,EAAA3D,OAAAC,EAAA,EAAAD,CAAA0D,EAAA,GAUlBE,EAVkBD,EAAA,GAUDE,EAVCF,EAAA,GAAAG,EAW6BhE,wBAAShB,GAXtCiF,EAAA/D,OAAAC,EAAA,EAAAD,CAAA8D,EAAA,GAWlBE,EAXkBD,EAAA,GAWGE,EAXHF,EAAA,GAAAG,EAYyBpE,mBAAS,GAZlCqE,EAAAnE,OAAAC,EAAA,EAAAD,CAAAkE,EAAA,GAYlBE,EAZkBD,EAAA,GAYCE,EAZDF,EAAA,GAAAG,EAauBxE,wBAAShB,GAbhCyF,EAAAvE,OAAAC,EAAA,EAAAD,CAAAsE,EAAA,GAalBE,EAbkBD,EAAA,GAaAE,EAbAF,EAAA,GAAAG,EAemC5E,mBAAU,MAAEhB,IAf/C6F,EAAA3E,OAAAC,EAAA,EAAAD,CAAA0E,EAAA,GAelBE,EAfkBD,EAAA,GAeME,EAfNF,EAAA,GAwBnBG,EAAwB,SAAC/B,GAAwC,IAArCgC,EAAqCC,UAAA5D,OAAA,QAAAtC,IAAAkG,UAAA,GAAAA,UAAA,QAAjClG,EAAWmG,EAAsBD,UAAA5D,OAAA,QAAAtC,IAAAkG,UAAA,GAAAA,UAAA,QAAdlG,EACvDiE,EAAEmC,iBACF,IAAMC,EAAkBpC,EAAEqC,OAAOhG,UAE7BoE,EACoB,UAAlB2B,GAA+C,YAAlBA,GAC/B1B,GAAU,IAGZI,EAAoBkB,GACpBd,EAAwBoB,SAASJ,GAAW,GAC5CxB,GAAU,KAoDd,OAnCAjD,oBAAW,WAESd,EAAQ4F,gBAAgBpC,EAASsB,GACzC9D,KAAK,SAAUC,GACrB0C,EAAgB1C,GAChBJ,GAAa,MAGjB,CAACvB,EAAM+C,MAAOrC,EAASwD,EAASsB,IA4BhCvF,EAAAC,EAAAC,cAAA,WACImB,GACArB,EAAAC,EAAAC,cAAA,6BAICmB,GAAajB,GACdJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACkC,EAAD,CAAkBhC,aAAeA,IAEjCJ,EAAAC,EAAAC,cAAA,UACIE,EAAakG,OAAOC,WAAW3E,IAAK,SAAU4E,EAAWC,GACzD,OACEzG,EAAAC,EAAAC,cAAA,MAAI4B,IAAK0E,EAAUzE,IACjB/B,EAAAC,EAAAC,cAAA,KAAGwG,KAAK,IAAI7C,QAAU,SAACC,GAAO+B,EAAsB/B,EAAG0C,EAAUzE,GAAI0E,KACnEzG,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAK8B,IAAKwE,EAAUzD,QAASb,IAAI,WAQ3CqC,GAtENvE,EAAAC,EAAAC,cAACyG,EAAD,CAAY5C,YAAc8B,EAAwBtB,MAAQA,GACxDvE,EAAAC,EAAAC,cAAC0G,EAAD,CACEtE,QAAUqC,EACVpC,YAAcwC,EACdvC,YAAcpC,EAAayG,mBAsE3B7G,EAAAC,EAAAC,cAAA,OAAK6B,GAAG,cACJwD,GACAvF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,KAAGwG,KAAK,IAAI7C,QAAU,SAACC,IA5CT,SAACA,GAC3BA,EAAEmC,iBAEFxD,QAAQC,IAAI,kBAAmBiD,EAAwBR,EAAoB,IAC3EK,EAAqBG,EAAwBR,EAAoB,IAKjEC,EAAsBD,EAAoB,GAmCC2B,CAAoBhD,KAAnD,QADF,QAKF9D,EAAAC,EAAAC,cAAA,YACIiF,EADJ,OAC6B4B,KAAKC,KAAM5G,EAAayG,gBAAkB,KAGrEzG,EAAakG,OAAOW,eACpBjH,EAAAC,EAAAC,cAAA,mBACQF,EAAAC,EAAAC,cAAA,KAAGwG,KAAK,IAAI7C,QAAU,SAACC,IAlEnB,SAACA,GACvBA,EAAEmC,iBACFxD,QAAQC,IAAI,6CAA8CtC,EAAakG,OAAOW,eAI9ErB,EAAyB,GAAAsB,OAAAnG,OAAAoG,EAAA,EAAApG,CAAM4E,GAAN,CAA8BJ,KACvD9C,QAAQC,IAAI,yBAA0BiD,GACtCH,EAAqBpF,EAAakG,OAAOW,eACzC7B,EAAsBD,EAAoB,GAyDOiC,CAAgBtD,KAA/C,YAMbzC,IAAcjB,GACfJ,EAAAC,EAAAC,cAAA,+BAGFF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,KAAT,yBCzIS8G,MARf,WACE,OAAOrH,EAAAC,EAAAC,cAAA,8EAELF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,KAAT,yCCqDW+G,aA3Db,SAAAA,EAAaC,GAAaxG,OAAAyG,EAAA,EAAAzG,CAAA0G,KAAAH,GACxBG,KAAKF,WAAaA,2DAIlB,OAAOE,KAAKF,WACTG,cACAzG,OACA0G,KAAK,IACLlG,KAAK,SAAUmG,GAGd,OAFeA,EAAatB,OAAOrF,iDAMxBc,EAAI8F,GAAO,IAAAC,EAAAL,KAC1B,OAAOA,KAAKF,WACTG,cACAzG,OACA8G,IAAI,CAAEC,QAASjG,IACfN,KAAK,SAACwG,GACL,OAAOA,EAAS3B,SAEjB7E,KAAK,SAACyG,GAEL,OADAzF,QAAQC,IAAI,wBAAyBwF,GAC9BJ,EAAKP,WACTG,cACAnB,WACA4B,OAAO,CAAEH,QAASjG,EAAIqG,UAAWP,IACjCpG,KAAK,SAAUwG,GAId,OAHAxF,QAAQC,IAAI,gCAAiCuF,GAGtClH,OAAAsH,EAAA,EAAAtH,CAAA,GACFmH,EADL,CAEE5B,OAAQ2B,EAAS3B,aAIxBgC,MAAM,SAAUxE,8CAKJ/B,GACf,OAAO0F,KAAKF,WACTG,cACAnB,WACAwB,IAAI,CAAEQ,YAAaxG,IACnBN,KAAK,SAACwG,GACL,OAAOA,EAAS3B,SAEjBgC,MAAM,SAAUxE,eC5CjB0E,EAAQ,yDAuFCC,MArFf,SAAc1I,GAAO,IAAAa,EACqBC,oBAAS,GAD9BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACZ8H,EADY5H,EAAA,GACE6H,EADF7H,EAAA,GAAAK,EAEqBN,oBAAS,GAF9BO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEZyH,EAFYxH,EAAA,GAEEyH,EAFFzH,EAAA,GAAAiD,EAGqBxD,wBAAShB,GAH9ByE,EAAAvD,OAAAC,EAAA,EAAAD,CAAAsD,EAAA,GAGZyE,EAHYxE,EAAA,GAGEyE,EAHFzE,EAAA,GAKnB/C,oBACE,WACEkB,QAAQC,IAAI,iBAEZ,IAAMsG,EAAaC,YACjB,WACOC,OAAOC,OAIZC,cAAcJ,GACdG,KAAKE,KAAK,eAAgB,WACxBF,KAAKG,OAAOC,KAAK,CACfC,cAAe,CAAC,mEAChBC,SAAU1J,EAAM2J,OAChBC,MAAOnB,IACN/G,KAAK,WACNkH,GAAgB,GAEhB,IAAMiB,EAAOT,KAAKU,MAAMC,kBACxBF,EAAKG,WAAWC,OAAO,WACrBnB,EAAgBoB,EAAKC,iBAAiB1B,MAGxC,IAAMyB,EAAOL,EAAKO,YAAYpC,MACxBqC,EAAYH,EAAKC,iBAAiB1B,GACxCO,EAAgB,IAAIzB,EAAoB6B,KAAKG,SAC7CT,EAAgBuB,SAUtB,MAGJ,CAACrK,EAAM2J,SAGT,IAAMW,EAAYC,sBAChB,WACEnB,KAAKU,MAAMC,kBAAkBS,WAE/B,IAGIC,EAAWF,sBACf,WACEnB,KAAKU,MAAMC,kBAAkBW,UAE/B,IAGF,OAAI/B,EACK1I,EAAAC,EAAAC,cAAA,8BAGJ0I,EAKH5I,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACS,EAAoB+J,SAArB,CAA8BC,MAAO7B,GACnC9I,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAAA,UAAQ2D,QAASwG,GAAjB,YAEArK,EAAAC,EAAAC,cAAC0K,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWvK,IACjCR,EAAAC,EAAAC,cAAC0K,EAAA,EAAD,CAAOC,KAAK,cAAcE,UAAW/G,IACrChE,EAAAC,EAAAC,cAAC0K,EAAA,EAAD,CAAOC,KAAK,SAASE,UAAW1D,OAX/BrH,EAAAC,EAAAC,cAAA,UAAQ2D,QAAS2G,GAAjB,YClESQ,QACW,cAA7B9B,OAAO+B,SAASC,UAEe,UAA7BhC,OAAO+B,SAASC,UAEhBhC,OAAO+B,SAASC,SAASpI,MACvB,2DCbNU,IAAS2H,OAAOnL,EAAAC,EAAAC,cAACkL,EAAD,CAAK1B,OAAQ2B,6EAA0CpI,SAASC,eAAe,SD4HzF,kBAAmBoI,WACrBA,UAAUC,cAAcC,MAAM/J,KAAK,SAAAgK,GACjCA,EAAaC","file":"static/js/main.84c13f54.chunk.js","sourcesContent":["import { createContext } from 'react'\r\n\r\nconst context = createContext(undefined)\r\n\r\nexport default context\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction HeaderBreadcrumb (props) {\r\n  return (\r\n    <div className=\"header\">\r\n        <h2>\r\n          { props.albumDetails && props.albumDetails.title ? \r\n            <Link to='/'>Albums</Link>\r\n            : \"Albums\"\r\n          }\r\n          { props.albumDetails && props.albumDetails.title &&\r\n            <span>\r\n               &nbsp;&raquo;&nbsp;\r\n               { props.albumDetails.title }\r\n            </span>\r\n          }\r\n        </h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HeaderBreadcrumb\r\n","import React, { useState, useEffect, useContext } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport PhotoServiceContext from './PhotoServiceContext'\r\nimport HeaderBreadcrumb from './HeaderBreadcrumb'\r\n\r\nfunction AlbumsList () {\r\n  const service = useContext(PhotoServiceContext) // new GooglePhotosService();\r\n  const [albums, setAlbums] = useState([])\r\n  const [isLoading, setIsLoading] = useState(true)\r\n\r\n  // useEffect only runs once to get the promise data initially.\r\n  useEffect(function () {\r\n    const promise = service.loadAlbums()\r\n    promise.then(function (arg) {\r\n      setAlbums(arg)\r\n      setIsLoading(false)\r\n    })\r\n  },\r\n  [service]\r\n  )\r\n\r\n  const newAlbums = albums.map( function (obj){\r\n    return (\r\n      <li key={obj.id}>\r\n        <Link to={'/album/' + obj.id}>\r\n          <figure>\r\n            <img src={obj.coverPhotoBaseUrl} alt=\"\" />            \r\n            <figcaption>\r\n              <h3>\r\n                { obj.title }\r\n              </h3>\r\n            </figcaption>\r\n          </figure>\r\n        </Link>\r\n        <br />\r\n      </li>\r\n    );\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      { isLoading && 'Loading...' }\r\n      { albums.length > 0 &&\r\n        <div>\r\n          { /* console.log('AlbumsList albums', albums) */ }\r\n\r\n          <HeaderBreadcrumb />\r\n          \r\n          <ul className=\"albums\">\r\n            { newAlbums }\r\n          </ul>\r\n        </div>\r\n      }\r\n\r\n      <hr />\r\n      <Link to='/'>Back to Albums List</Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AlbumsList\r\n","import React, { useState, useEffect, useContext } from 'react'\r\nimport PhotoServiceContext from './PhotoServiceContext'\r\n\r\nfunction ViewPhoto (props) {\r\n  const photoID = props.photoID; //props.match.params.pid\r\n  const photoNumber = props.photoNumber\r\n  const photosTotal = props.photosTotal\r\n  console.log('ViewPhoto -', photoID, photoNumber, photosTotal)\r\n\r\n  const service = useContext(PhotoServiceContext)\r\n  const [photoDetails, setPhotoDetails] = useState(undefined)\r\n  const [isLoading, setIsLoading] = useState(true)\r\n\r\n  useEffect(\r\n    function () {\r\n      const promise = service.loadPhotoDetail(photoID)\r\n      promise.then(function (arg) {\r\n        setPhotoDetails(arg)\r\n        setIsLoading(false)\r\n      })\r\n    },\r\n    [props.match, service, photoID] // keep watching this for changes\r\n  )\r\n\r\n  return (\r\n    <div>\r\n      { isLoading && \r\n        <figure>\r\n          <figcaption>\r\n            'Loading...' \r\n          </figcaption>\r\n        </figure>      \r\n      }\r\n      { !isLoading && photoDetails &&\r\n        <figure>\r\n          <img src={photoDetails.baseUrl} alt=\"\" />            \r\n          <figcaption>\r\n            { photoNumber } of { photosTotal }\r\n          </figcaption>\r\n        </figure>\r\n      }\r\n      { !isLoading && !photoDetails &&\r\n        <figure>\r\n          <figcaption>\r\n            Photo not found\r\n          </figcaption>\r\n        </figure>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ViewPhoto\r\n","import React, { useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n// Source: https://www.thomasmaximini.com/building-fullscreen-overlays-with-react-16-portals\r\n// use the same div here that I mount my app into\r\n// so the modal will be a sibling of the rest of the app\r\n// in the DOM hierachy\r\nconst modalRoot = document.getElementById('root');\r\n\r\nfunction Modal (props) {\r\n  // constructor\r\n  const el = document.createElement('div');\r\n  el.setAttribute(\"id\", \"modal\")\r\n\r\n  // Similar to componentDidMount and componentDidUpdate\r\n  useEffect( function (){\r\n    modalRoot.appendChild( el );\r\n\r\n    // Equivalent to componentWillUnmount\r\n    // Specify how to clean up after this effect:\r\n    return function cleanup() {      \r\n      modalRoot.removeChild( el );\r\n    };\r\n  });\r\n\r\n  return ReactDOM.createPortal( props.children, el);\r\n}\r\n\r\nexport default Modal","import React from 'react'\r\nimport Modal from './Modal';\r\n\r\n// props.children renders child nodes within ImageModal \r\nfunction ImageModal (props) {\r\n  return (\r\n    <Modal>\r\n      <div className=\"wrapper\" onClick={ (e) => { props.handleClose(e) } } >{/* className={ props.shown ? '' : 'hidden' } */}\r\n        <div className=\"inner\">\r\n          { props.children }\r\n        </div>\r\n      </div>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default ImageModal","import React, { useState, useEffect, useContext, useRef } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n// import DummyGooglePhotosService from './DummyGooglePhotosService';\r\nimport PhotoServiceContext from './PhotoServiceContext'\r\nimport HeaderBreadcrumb from './HeaderBreadcrumb'\r\nimport ViewPhoto from './ViewPhoto'\r\nimport ImageModal from './ImageModal'\r\n\r\nfunction ViewAlbum (props) {\r\n  // console.log('ViewAlbum props', props)\r\n  const albumID = props.match.params.aid\r\n\r\n  // const service = new DummyGooglePhotosService();\r\n  const service = useContext(PhotoServiceContext)\r\n\r\n  const [albumDetails, setAlbumDetails] = useState(undefined)\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const [shown, setShown] = useState(false)\r\n  const [selectedPhotoID, setSelectedPhotoID] = useState(undefined)\r\n  const [selectedPhotoNumber, setSelectedPhotoNumber] = useState(undefined)\r\n  const [currentPageNumber, setCurrentPageNumber] = useState(1)\r\n  const [currentPageToken, setCurrentPageToken] = useState(undefined)\r\n  //const [previousPageToken, setPreviousPageToken] = useState(undefined)\r\n  const [previousPageTokenArray, setPreviousPageTokenArray] = useState( [ undefined ] );\r\n\r\n  //const previousStatePreviousPageToken = useRef(); // useRef has a 'current' property\r\n  // useEffect( () => {\r\n  //     previousStatePreviousPageToken.current = previousPageToken;\r\n  //   },\r\n  //   [ previousPageToken ]\r\n  // );\r\n\r\n  const handleClickShowOrHide = (e, pid=undefined, pnumber=undefined) => {\r\n    e.preventDefault(); // cancel default behaviour of opening a link\r\n    const targetClassName = e.target.className; // .tagName.toLowerCase()\r\n\r\n    if( shown ){\r\n      if( targetClassName===\"inner\" || targetClassName===\"wrapper\" ){\r\n        setShown( false )\r\n      }\r\n    } else {\r\n      setSelectedPhotoID( pid )\r\n      setSelectedPhotoNumber( parseInt(pnumber) + 1 )\r\n      setShown( true )\r\n    }\r\n  };\r\n\r\n  /* Modal resource: https://www.thomasmaximini.com/building-fullscreen-overlays-with-react-16-portals */\r\n  const renderModal = () => {\r\n    return (\r\n      <ImageModal handleClose={ handleClickShowOrHide } shown={ shown }>\r\n        <ViewPhoto \r\n          photoID={ selectedPhotoID } \r\n          photoNumber={ selectedPhotoNumber } \r\n          photosTotal={ albumDetails.mediaItemsCount } \r\n        />\r\n      </ImageModal>\r\n    );\r\n  }\r\n\r\n  useEffect( () => {\r\n      // TO DO: add case for when nextPageToken has a value...\r\n      const promise = service.loadAlbumDetail(albumID, currentPageToken)\r\n      promise.then(function (arg) {\r\n        setAlbumDetails(arg)        \r\n        setIsLoading(false)\r\n      })\r\n    },\r\n    [props.match, service, albumID, currentPageToken] // keep watching this for changes\r\n  );\r\n\r\n  const handleClickNext = (e) => {\r\n    e.preventDefault();\r\n    console.log('handleClickNext albumDetails.nextPageToken', albumDetails.result.nextPageToken)\r\n    //previousStatePreviousPageToken.current = previousPageToken;\r\n    //setPreviousPageToken( currentPageToken )\r\n    //previousPageTokenArray.push( currentPageToken );\r\n    setPreviousPageTokenArray( [...previousPageTokenArray, currentPageToken] );\r\n    console.log('previousPageTokenArray', previousPageTokenArray)\r\n    setCurrentPageToken( albumDetails.result.nextPageToken )\r\n    setCurrentPageNumber( currentPageNumber + 1 )\r\n  }\r\n\r\n  const handleClickPrevious = (e) => {\r\n    e.preventDefault();    \r\n    //setCurrentPageToken( previousPageToken )\r\n    console.log('prev page token', previousPageTokenArray[ currentPageNumber - 1 ])\r\n    setCurrentPageToken( previousPageTokenArray[ currentPageNumber - 1 ] );\r\n\r\n    // need to look up from history, so may not need to use useRef  \r\n    // setPreviousPageToken( previousStatePreviousPageToken.current )\r\n    // previousStatePreviousPageToken.current = ? \r\n    setCurrentPageNumber( currentPageNumber - 1 )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      { isLoading && \r\n        <span>\r\n          'Loading...'\r\n        </span>\r\n      }\r\n      { !isLoading && albumDetails &&\r\n        <div>\r\n          <HeaderBreadcrumb albumDetails={ albumDetails } />\r\n          \r\n          <ul>\r\n            { albumDetails.result.mediaItems.map( function (mediaItem, itemIndex){\r\n              return (\r\n                <li key={mediaItem.id}>\r\n                  <a href=\"#\" onClick={ (e) => {handleClickShowOrHide(e, mediaItem.id, itemIndex)} } >\r\n                    <figure>\r\n                      <img src={mediaItem.baseUrl} alt='' />\r\n                    </figure>                  \r\n                  </a>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n\r\n          { shown &&\r\n            renderModal() \r\n          }\r\n          \r\n          <div id=\"pagination\">\r\n            { currentPageToken &&\r\n              <span>\r\n                <a href=\"#\" onClick={ (e) => { handleClickPrevious(e) } }>Prev</a>&nbsp;\r\n              </span>\r\n            }\r\n\r\n            <span>\r\n              { currentPageNumber } of { Math.ceil( albumDetails.mediaItemsCount / 25 ) }\r\n            </span>\r\n\r\n            { albumDetails.result.nextPageToken &&\r\n              <span>\r\n                &nbsp;<a href=\"#\" onClick={ (e) => { handleClickNext(e) } }>Next</a>\r\n              </span>\r\n            }\r\n          </div>\r\n        </div>\r\n      }\r\n      { !isLoading && !albumDetails &&\r\n        <span>Album not found</span>\r\n      }      \r\n\r\n      <hr />\r\n      <Link to='/'>Back to Albums List</Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ViewAlbum\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction About () {\r\n  return <div>\r\n      This site was made with React 16.8, Google Photos API, and SASS.\r\n    <br />\r\n    <Link to='/'>Back</Link>\r\n  </div>\r\n}\r\n\r\nexport default About\r\n","class GooglePhotosService {\r\n  constructor (gapiClient) {\r\n    this.gapiClient = gapiClient\r\n  }\r\n\r\n  loadAlbums () {\r\n    return this.gapiClient\r\n      .photoslibrary\r\n      .albums\r\n      .list({})\r\n      .then(function (fullResponse) { // { result: { albums } }\r\n        const albums = fullResponse.result.albums\r\n        // Handle the results here (response.result has the parsed body).\r\n        return albums\r\n      })\r\n  }\r\n\r\n  loadAlbumDetail (id, token) {\r\n    return this.gapiClient\r\n      .photoslibrary\r\n      .albums\r\n      .get({ albumId: id })\r\n      .then((response) => {\r\n        return response.result\r\n      })\r\n      .then((album) => {\r\n        console.log('loadAlbumDetail album', album)\r\n        return this.gapiClient\r\n          .photoslibrary\r\n          .mediaItems\r\n          .search({ albumId: id, pageToken: token })\r\n          .then(function (response) {\r\n            console.log('loadAlbumDetail then response', response)\r\n            \r\n            // join album data with mediaItems corresponding to album\r\n            return {\r\n              ...album,\r\n              result: response.result\r\n            }\r\n          })\r\n      })\r\n      .catch(function (e) {\r\n        return undefined\r\n      })\r\n  }\r\n\r\n  loadPhotoDetail (id) {\r\n    return this.gapiClient\r\n      .photoslibrary\r\n      .mediaItems\r\n      .get({ mediaItemId: id })\r\n      .then((response) => {\r\n        return response.result\r\n      })\r\n      .catch(function (e) {\r\n        return undefined\r\n      })\r\n  }\r\n}\r\n\r\nexport default GooglePhotosService\r\n","/* global gapi */\nimport React, { useEffect, useCallback, useState } from 'react'\nimport AlbumsList from './AlbumsList'\nimport ViewAlbum from './ViewAlbum'\nimport About from './About'\nimport { HashRouter as Router, Route } from 'react-router-dom'\nimport PhotoServiceContext from './PhotoServiceContext'\n// import DummyGooglePhotosService from './DummyGooglePhotosService';\nimport GooglePhotosService from './GooglePhotosService'\n\nconst SCOPE = 'https://www.googleapis.com/auth/photoslibrary.readonly'\n\nfunction App (props) {\n  const [initialising, setInitialising] = useState(true)\n  const [isAuthorised, setIsAuthorised] = useState(false)\n  const [photoService, setPhotoService] = useState(undefined)\n\n  useEffect(\n    () => {\n      console.log('we\\'ve mounted')\n      \n      const intervalId = setInterval(\n        () => {\n          if (!window.gapi) {\n            return\n          }\n\n          clearInterval(intervalId)\n          gapi.load('client:auth2', () => {\n            gapi.client.init({\n              discoveryDocs: ['https://photoslibrary.googleapis.com/$discovery/rest?version=v1'],\n              clientId: props.gapiID,\n              scope: SCOPE\n            }).then(function () {\n              setInitialising(false)\n\n              const auth = gapi.auth2.getAuthInstance()\n              auth.isSignedIn.listen(() => {\n                setIsAuthorised(user.hasGrantedScopes(SCOPE))\n              })\n\n              const user = auth.currentUser.get()\n              const startAuth = user.hasGrantedScopes(SCOPE)\n              setPhotoService(new GooglePhotosService(gapi.client))\n              setIsAuthorised(startAuth)\n\n              // gapi.client.photoslibrary.albums.list({})\n              //   .then(function(response) {\n              //     // Handle the results here (response.result has the parsed body).\n              //     console.log(\"Album Response\", response);\n              //   });\n            })\n          })\n        },\n        100\n      )\n    },\n    [props.gapiID]\n  )\n\n  const onSignOut = useCallback(\n    () => {\n      gapi.auth2.getAuthInstance().signOut()\n    },\n    []\n  )\n\n  const onSignIn = useCallback(\n    () => {\n      gapi.auth2.getAuthInstance().signIn()\n    },\n    []\n  )\n\n  if (initialising) {\n    return <div>Initialising...</div>\n  }\n\n  if (!isAuthorised) {\n    return <button onClick={onSignIn}>Sign in</button>\n  }\n\n  return (\n    <div className='App'>\n      <PhotoServiceContext.Provider value={photoService}>\n        <Router>\n          <button onClick={onSignOut}>Sign Out</button>\n\n          <Route path='/' exact component={AlbumsList} />\n          <Route path='/album/:aid' component={ViewAlbum} />\n          <Route path='/about' component={About} />\n        </Router>\n      </PhotoServiceContext.Provider>\n    </div>\n  )\n}\n\nexport default App\n","/* global fetch */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './sass/style.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App gapiID={process.env.REACT_APP_GAPI_CLIENT_ID} />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}