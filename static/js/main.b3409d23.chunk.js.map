{"version":3,"sources":["PhotoServiceContext.js","AlbumsList.js","ViewAlbum.js","ViewPhoto.js","About.js","HeaderBar.js","GooglePhotosService.js","App.js","serviceWorker.js","index.js"],"names":["context","createContext","undefined","AlbumsList","service","useContext","PhotoServiceContext","_useState","useState","_useState2","Object","slicedToArray","albums","setAlbums","_useState3","_useState4","isLoading","setIsLoading","useEffect","loadAlbums","then","arg","newAlbums","map","obj","react_default","a","createElement","key","id","react_router_dom","to","title","src","coverPhotoBaseUrl","ViewAlbum","props","albumID","match","params","albumDetails","setAlbumDetails","loadAlbumDetail","console","log","mediaItems","mediaItem","baseUrl","alt","ViewPhoto","photoID","photoDetails","setPhotoDetails","loadPhotoDetail","About","HeaderBar","GooglePhotosService","gapiClient","classCallCheck","this","photoslibrary","list","fullResponse","result","_this","get","albumId","response","album","search","objectSpread","catch","e","mediaItemId","SCOPE","App","initialising","setInitialising","isAuthorised","setIsAuthorised","_useState5","_useState6","photoService","setPhotoService","intervalId","setInterval","window","gapi","clearInterval","load","client","init","discoveryDocs","clientId","gapiID","scope","auth","auth2","getAuthInstance","isSignedIn","listen","user","hasGrantedScopes","currentUser","startAuth","onSignOut","useCallback","signOut","onSignIn","signIn","className","Provider","value","src_HeaderBar","onClick","react_router","path","exact","component","Boolean","location","hostname","ReactDOM","render","src_App","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b3409d23.chunk.js","sourcesContent":["import { createContext } from 'react'\r\n\r\nconst context = createContext(undefined)\r\n\r\nexport default context\n","import React, { useState, useEffect, useContext } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport PhotoServiceContext from './PhotoServiceContext'\r\n\r\nfunction AlbumsList () {\r\n  const service = useContext(PhotoServiceContext) // new GooglePhotosService();\r\n  const [albums, setAlbums] = useState([])\r\n  const [isLoading, setIsLoading] = useState(true)\r\n\r\n  // useEffect only runs once to get the promise data initially.\r\n  useEffect(function () {\r\n    // console.log(\"promise inside\");\r\n    const promise = service.loadAlbums()\r\n    promise.then(function (arg) {\r\n      // console.log(\"promise finished\", arg);\r\n      setAlbums(arg)\r\n      setIsLoading(false)\r\n    })\r\n  },\r\n  []\r\n  )\r\n\r\n  const newAlbums = albums.map(function (obj) {\r\n    return <div key={obj.id}>\r\n      <Link to={'/album/' + obj.id}>{ obj.title }<img src={obj.coverPhotoBaseUrl} /></Link><br />\r\n    </div>\r\n  })\r\n\r\n  return <div>\r\n    { newAlbums }\r\n    {\r\n      isLoading ? 'Loading' : 'Not loading'\r\n    }\r\n  </div>\r\n}\r\n\r\nexport default AlbumsList\n","import React, { useState, useEffect, useContext } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n// import DummyGooglePhotosService from './DummyGooglePhotosService';\r\nimport PhotoServiceContext from './PhotoServiceContext'\r\n\r\nfunction ViewAlbum (props) {\r\n  const albumID = props.match.params.id\r\n\r\n  // const service = new DummyGooglePhotosService();\r\n  const service = useContext(PhotoServiceContext)\r\n\r\n  const [albumDetails, setAlbumDetails] = useState(undefined)\r\n  const [isLoading, setIsLoading] = useState(true)\r\n\r\n  useEffect(\r\n    function () {\r\n      const promise = service.loadAlbumDetail(albumID)\r\n      promise.then(function (arg) {\r\n        console.log('promise finished', arg)\r\n        setAlbumDetails(arg)\r\n        setIsLoading(false)\r\n      })\r\n    },\r\n    [props.match] // keep watching this for changes\r\n  )\r\n\r\n  // If the service is finished loading the album, but the album doesnt exist\r\n  if (!isLoading && !albumDetails) { // isLoaded && !albumDetails\r\n    return <div>\r\n      <h2>Album not found</h2>\r\n    </div>\r\n  }\r\n\r\n  return <div>\r\n    {isLoading && 'Loading...'}\r\n    {albumDetails &&\r\n      <div>\r\n        <h2>{albumDetails.title}</h2>\r\n        <ul>\r\n          {albumDetails.mediaItems.map(function (mediaItem) {\r\n            return <li key={mediaItem.id}>\r\n              <Link to={'/photo/' + mediaItem.id}>\r\n                <img src={mediaItem.baseUrl} alt='' />\r\n              </Link>\r\n            </li>\r\n          })}\r\n        </ul>\r\n      </div>\r\n    }\r\n\r\n    <hr />\r\n    <Link to='/'>Back to Albums List</Link>\r\n  </div>\r\n}\r\n\r\nexport default ViewAlbum\n","import React, { useState, useEffect, useContext } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport PhotoServiceContext from './PhotoServiceContext'\r\n\r\nfunction ViewPhoto (props) {\r\n  console.log('props', props)\r\n\r\n  console.log('props.match', props.match)\r\n\r\n  console.log('props.match.params', props.match.params)\r\n\r\n  const photoID = props.match.params.id\r\n  const service = useContext(PhotoServiceContext)\r\n\r\n  const [photoDetails, setPhotoDetails] = useState(undefined)\r\n  const [isLoading, setIsLoading] = useState(true)\r\n\r\n  useEffect(\r\n    function () {\r\n      console.log('photoID', photoID)\r\n      const promise = service.loadPhotoDetail(photoID)\r\n      promise.then(function (arg) {\r\n        console.log('promise finished', arg)\r\n        setPhotoDetails(arg)\r\n        setIsLoading(false)\r\n      })\r\n    },\r\n    [props.match] // keep watching this for changes\r\n  )\r\n\r\n  if (!isLoading && !photoDetails) {\r\n    return <div>\r\n      <h2>Photo not found</h2>\r\n    </div>\r\n  }\r\n\r\n  return <div>\r\n    {isLoading && 'Loading...'}\r\n    {photoDetails &&\r\n      <div>\r\n        <img src={photoDetails.baseUrl} />\r\n      </div>\r\n    }\r\n\r\n    <hr />\r\n    <Link to='/'>Back to Albums List</Link>\r\n  </div>\r\n}\r\n\r\nexport default ViewPhoto\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction About () {\r\n  return <div>\r\n      Lorem ipsom yada delour.\r\n    <br />\r\n    <Link to='/'>Back</Link>\r\n  </div>\r\n}\r\n\r\nexport default About\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction HeaderBar () {\r\n  return <div>\r\n    <Link to='/'>Albums List</Link><br />\r\n    <Link to='/about'>About</Link>\r\n  </div>\r\n}\r\n\r\nexport default HeaderBar\n","class GooglePhotosService {\r\n  constructor (gapiClient) {\r\n    this.gapiClient = gapiClient\r\n  }\r\n\r\n  loadAlbums () {\r\n    return this.gapiClient\r\n      .photoslibrary\r\n      .albums\r\n      .list({})\r\n      .then(function (fullResponse) { // { result: { albums } }\r\n        const albums = fullResponse.result.albums\r\n        // Handle the results here (response.result has the parsed body).\r\n        return albums\r\n      })\r\n  }\r\n\r\n  loadAlbumDetail (id) {\r\n    return this.gapiClient\r\n      .photoslibrary\r\n      .albums\r\n      .get({ albumId: id })\r\n      .then((response) => {\r\n        console.log('album gathered')\r\n        return response.result\r\n      })\r\n      .then((album) => {\r\n        console.log('getting media items for', album)\r\n        return this.gapiClient\r\n          .photoslibrary\r\n          .mediaItems\r\n          .search({ albumId: id })\r\n          .then(function (response) {\r\n            console.log('media search done', response)\r\n            const mediaItems = response.result.mediaItems\r\n\r\n            return {\r\n              ...album,\r\n              mediaItems: mediaItems\r\n            }\r\n          })\r\n      })\r\n      .catch(function (e) {\r\n        return undefined\r\n      })\r\n  }\r\n\r\n  loadPhotoDetail (id) {\r\n    return this.gapiClient\r\n      .photoslibrary\r\n      .mediaItems\r\n      .get({ mediaItemId: id })\r\n      .then((response) => {\r\n        console.log('photo gathered')\r\n        console.log(response)\r\n        return response.result\r\n      })\r\n      .catch(function (e) {\r\n        return undefined\r\n      })\r\n  }\r\n}\r\n\r\nexport default GooglePhotosService\n","/* global gapi */\nimport React, { useEffect, useCallback, useState } from 'react'\nimport './App.scss'\nimport AlbumsList from './AlbumsList'\nimport ViewAlbum from './ViewAlbum'\nimport ViewPhoto from './ViewPhoto'\nimport About from './About'\nimport HeaderBar from './HeaderBar'\nimport { HashRouter as Router, Route } from 'react-router-dom'\nimport PhotoServiceContext from './PhotoServiceContext'\n// import DummyGooglePhotosService from './DummyGooglePhotosService';\nimport GooglePhotosService from './GooglePhotosService'\n\nconst SCOPE = 'https://www.googleapis.com/auth/photoslibrary.readonly'\n\nfunction App (props) {\n  const [initialising, setInitialising] = useState(true)\n  const [isAuthorised, setIsAuthorised] = useState(false)\n  const [photoService, setPhotoService] = useState(undefined)\n\n  useEffect(\n    () => {\n      console.log('we\\'ve mounted')\n      const intervalId = setInterval(\n        () => {\n          console.log('is google api loaded?')\n          if (!window.gapi) {\n            console.log('gapi not loaded yet')\n            return\n          }\n          console.log('gapi loaded dsfsd!!')\n\n          clearInterval(intervalId)\n          gapi.load('client:auth2', () => {\n            console.log('auth2 is loaded')\n            gapi.client.init({\n              discoveryDocs: ['https://photoslibrary.googleapis.com/$discovery/rest?version=v1'],\n              clientId: props.gapiID,\n              scope: SCOPE\n            }).then(function () {\n              console.log('we\\'re initialised')\n              setInitialising(false)\n\n              const auth = gapi.auth2.getAuthInstance()\n              auth.isSignedIn.listen(() => {\n                console.log('signed in status changed')\n                setIsAuthorised(user.hasGrantedScopes(SCOPE))\n              })\n\n              const user = auth.currentUser.get()\n              const startAuth = user.hasGrantedScopes(SCOPE)\n              console.log('has photos library permission?', startAuth)\n              setPhotoService(new GooglePhotosService(gapi.client))\n              setIsAuthorised(startAuth)\n\n              // gapi.client.photoslibrary.albums.list({})\n              //   .then(function(response) {\n              //     // Handle the results here (response.result has the parsed body).\n              //     console.log(\"Album Response\", response);\n              //   });\n            })\n          })\n        },\n        100\n      )\n    },\n    []\n  )\n\n  const onSignOut = useCallback(\n    () => {\n      gapi.auth2.getAuthInstance().signOut()\n    },\n    []\n  )\n\n  const onSignIn = useCallback(\n    () => {\n      gapi.auth2.getAuthInstance().signIn()\n    },\n    []\n  )\n\n  if (initialising) {\n    return <div>Initing...</div>\n  }\n\n  if (!isAuthorised) {\n    return <button onClick={onSignIn}>Sign in</button>\n  }\n\n  return (\n    <div className='App'>\n      <PhotoServiceContext.Provider value={photoService}>\n        <Router>\n          <HeaderBar />\n\n          <button onClick={onSignOut}>Sign Out</button>\n\n          <div>\n            <Route path='/' exact component={AlbumsList} />\n            <Route path='/album/:id' component={ViewAlbum} />\n            <Route path='/about' component={About} />\n            <Route path='/photo/:id' component={ViewPhoto} />\n          </div>\n        </Router>\n      </PhotoServiceContext.Provider>\n    </div>\n  )\n}\n\nexport default App\n","/* global fetch */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App gapiID={process.env.REACT_APP_GAPI_CLIENT_ID} />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}